#include "stdint.h"

#include "hal_platform.h"
#include "aci.h"
#include "aci_cmds.h"
#include "aci_evts.h"
#include "acilib.h"
#include "aci_protocol_defines.h"
#include "acilib_defs.h"
#include "acilib_if.h"
#include "acilib_types.h"

/*SYSTEM COMMANDS*/

#define _TEST 0x01              //   Enables test mode
#define _ECHO 0x02              //   Echo test
#define _DTM_COMM 0x03          //   Direct test mode command
#define _SLEEP 0x04             //   Activates SLEEP mode
#define _WAKEUP 0x05            //   Wakes up from sleep mode
#define _SETUP 0x06             //   Uploads the configuration generated by nRFgo Studio
                                //     -- GAP  Settings
                                //     -- GATT Services
                                //     -- HARDWARE Settings
#define _READ_DYN_DAT 0x07      //   Extracts dynamic data for storage in controller
#define _WRITE_DYN_DAT 0x08     //   Restores dynamic data to nRF8001 volatile memory
#define _DEV_VER 0x09           //   Device version
#define _DEV_ADD 0x0A           //   Device address
#define _BATT_LEV 0x0B          //   Measures the battery supply voltage
#define _TEMP 0x0C              //   Measures the ambient temperature
#define _RAD_RES 0x0E           //   Reset the radio transceiver
#define _CONNECT 0x0F           //   Start advertising and establishes a coonection with the peer device
#define _BOND 0x10              //   Start advertising with the intent os setting up a trusted relationship with a peer device
#define _DISCONNECT 0x11        //   Terminates the connection with the peer device
#define _TX_POW 0x12            //   Output power level of radio
#define _TIME_REQ 0x13          //   Initiates the connection parameter update procedure
#define _OPEN_REM_PIPE 0x14     //   Opens a remote receive pipe from a peer device for data transfer
#define _APP_LAT 0x19           //   Sets the application latency
#define _KEY 0x1A               //   Sets the pass key
#define _OPEN_ADV_PIPE 0x1B     //   Sets the pipes that are used for advertising data
#define _BROADCAST 0x1C         //   Enables a pipe to start sending advertisment data on non-connectable advertisment packets
#define _BOND_SEC_REQ 0x1D      //   Sends the security Manager Protocol (SMP)
#define _DIR_CONNECT 0x1E       //   Initiates directed advertisment
#define _CLOSE_REM_PIPE 0x1F    //   Closes a remote receive pipe from a peer device


/*DATA COMMANDS*/

#define _SET_LOCAL_DATA 0x0D    //   Sets local uint8_tacteristic value or uint8_tacteristic descriptor
#define _SEND_DATA 0x15         //   Sends data to a peer device through a transmit service pipe
#define _SEND_DATA_ACK 0x16     //   Comfirms reception of data from a peer device
#define _REQ_DATA 0x17          //   Requests data from a peer device through a service receive pipe
#define _SEND_DATA_NACK 0x18    //   Negaively acknowledges (nack) reception of data from a peer device


/*SYSTEM EVENTS*/

#define _DEV_START_EV 0x81      //   Indicates rest recovery or a state change
#define _ECHO_EV 0x82           //   Returns an identical copy of the PDU sent using the ECHO command in test mode
#define _HW_ERROR_EV 0x83       //   Returns hardware error debug information
#define _COMM_RESP_EV 0x84      //   Confirms reception or execution of an ACI command
#define _CONNECTED_EV 0x85      //   Indicates that a connection has been established with a peer device
#define _DISCONNECTED_EV 0x86   //   Indicates the loss of a connection
#define _BOND_STAT_EV 0x87      //   Returns the bonding procedure execution status
#define _PIPE_STAT_EV 0x88      //   Lists the pipe connection and availibility status
#define _TIM_EV 0x89            //   Returns the current connection timing information upon change of parameters
#define _DISP_KEY_EV 0x8E       //   Requests the application controller to display the 6 digit pass key
#define _KEY_REQ_EV 0x8F        //   Requests the controller to enter the pass key


/*DATA EVENTS*/

#define _DATA_CRED_EV 0x8A      //   Returns data command buffer credits
#define _DATA_ACK_EV 0x8B       //   Indicates reception of data by the peer device
#define _DATA_REC_EV 0x8C       //   Indicates that data has been received from the peer device
#define _PIPE_ERROR_EV 0x8D     //   Reports a pipe transmission failture

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

extern int8_t readBuff[32];
extern int8_t open_adv_pipe[10];
extern int8_t bond[6];
extern int8_t connect[6];
extern int8_t Directconnect[2];
extern int8_t broadcast[6];
extern int8_t set_local_data[4];
extern uint8_t  sendData[];

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void InitGPIOInt();
void Init_MCU();
void Blep_Write(uint8_t *dat, uint16_t len);
void Blep_Read();
void Blep_Setup();
uint8_t Blep_WaitForEvent(uint8_t event);
//extern void UART_Write_Line(uint8_t *line);
extern void Blep_Bond(uint16_t timeout, uint16_t adv_interval);
extern void Blep_SendData(uint8_t *dat, uint8_t len, uint8_t pipe);
extern void Blep_DirectConnect();
extern void Blep_Connect();
extern void Blep_TestModeState(char state);
extern void Blep_SendDataAck(uint8_t pipe);
extern void Blep_OpenRemotePipe(uint8_t pipe);
extern void Blep_SetLocalData(char *dat, char len, char pipe);
extern void Blep_GetTemp();
extern char Blep_DecodeTemp();
extern void Blep_Disconnect();
extern char Blep_EventCode();
extern char Blep_EventOpcode();
extern char Blep_EventStatus();

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef struct
{
  uint8_t status_byte;
  uint8_t buffer[32];
} TSetupMsg;

//acilib_prototypes

extern void acil_encode_cmd_set_test_mode(uint8_t *buffer, aci_cmd_params_test_t *p_aci_cmd_params_test);
extern void acil_encode_cmd_sleep(uint8_t *buffer);
extern void acil_encode_cmd_get_device_version(uint8_t *buffer);
extern void acil_encode_cmd_set_local_data(uint8_t *buffer, aci_cmd_params_set_local_data_t *p_aci_cmd_params_set_local_data, uint8_t data_size);
extern void acil_encode_cmd_connect(uint8_t *buffer, aci_cmd_params_connect_t *p_aci_cmd_params_connect);
extern void acil_encode_cmd_bond(uint8_t *buffer, aci_cmd_params_bond_t *p_aci_cmd_params_bond);
extern void acil_encode_cmd_disconnect(uint8_t *buffer, aci_cmd_params_disconnect_t *p_aci_cmd_params_disconnect);
extern void acil_encode_baseband_reset(uint8_t *buffer);
extern void acil_encode_direct_connect(uint8_t *buffer);
extern void acil_encode_cmd_wakeup(uint8_t *buffer);
extern void acil_encode_cmd_set_radio_tx_power(uint8_t *buffer, aci_cmd_params_set_tx_power_t *p_aci_cmd_params_set_tx_power);
extern void acil_encode_cmd_get_address(uint8_t *buffer);
extern void acil_encode_cmd_send_data(uint8_t *buffer, aci_cmd_params_send_data_t *p_aci_cmd_params_send_data_t, uint8_t data_size);
extern void acil_encode_cmd_request_data(uint8_t *buffer, aci_cmd_params_request_data_t *p_aci_cmd_params_request_data);
extern void acil_encode_cmd_open_remote_pipe(uint8_t *buffer, aci_cmd_params_open_remote_pipe_t *p_aci_cmd_params_open_remote_pipe);
extern void acil_encode_cmd_close_remote_pipe(uint8_t *buffer, aci_cmd_params_close_remote_pipe_t *p_aci_cmd_params_close_remote_pipe);
extern void acil_encode_cmd_echo_msg(uint8_t *buffer, aci_cmd_params_echo_t *p_cmd_params_echo, uint8_t msg_size);
extern void acil_encode_cmd_battery_level(uint8_t *buffer);
extern void acil_encode_cmd_temparature(uint8_t *buffer);
extern void acil_encode_cmd_read_dynamic_data(uint8_t *buffer);
extern void acil_encode_cmd_write_dynamic_data(uint8_t *buffer, uint8_t seq_no, uint8_t* dynamic_data, uint8_t dynamic_data_size);
extern void acil_encode_cmd_change_timing_req(uint8_t *buffer, aci_cmd_params_change_timing_t *p_aci_cmd_params_change_timing);
extern void acil_encode_cmd_set_app_latency(uint8_t *buffer, aci_cmd_params_set_app_latency_t *p_aci_cmd_params_set_app_latency);
extern void acil_encode_cmd_change_timing_req_GAP_PPCP(uint8_t *buffer);
extern void acil_encode_cmd_setup(uint8_t *buffer, aci_cmd_params_setup_t *p_aci_cmd_params_setup, uint8_t setup_data_size);
extern void acil_encode_cmd_dtm_cmd(uint8_t *buffer, aci_cmd_params_dtm_cmd_t *p_aci_cmd_params_dtm_cmd);
extern void acil_encode_cmd_send_data_ack(uint8_t *buffer, const uint8_t pipe_number );
extern void acil_encode_cmd_send_data_nack(uint8_t *buffer, const uint8_t pipe_number, const uint8_t err_code );
extern void acil_encode_cmd_bond_security_request(uint8_t *buffer);
extern void acil_encode_cmd_broadcast(uint8_t *buffer, aci_cmd_params_broadcast_t * p_aci_cmd_params_broadcast);
extern void acil_encode_cmd_open_adv_pipes(uint8_t *buffer, aci_cmd_params_open_adv_pipe_t * p_aci_cmd_params_open_adv_pipe);
extern void acil_encode_cmd_set_key(uint8_t *buffer, aci_cmd_params_set_key_t *p_aci_cmd_params_set_key);
extern char acil_encode_cmd(uint8_t *buffer, aci_cmd_t *p_aci_cmd);
extern void acil_decode_evt_command_response(uint8_t *buffer_in, aci_evt_params_cmd_rsp_t *p_evt_params_cmd_rsp);
extern void acil_decode_evt_device_started(uint8_t *buffer_in, aci_evt_params_device_started_t *p_evt_params_device_started);
extern void acil_decode_evt_pipe_status(uint8_t *buffer_in, aci_evt_params_pipe_status_t *p_aci_evt_params_pipe_status);
extern void acil_decode_evt_disconnected(uint8_t *buffer_in, aci_evt_params_disconnected_t *p_aci_evt_params_disconnected);
extern void acil_decode_evt_bond_status(uint8_t *buffer_in, aci_evt_params_bond_status_t *p_aci_evt_params_bond_status);
extern uint8_t acil_decode_evt_data_received(uint8_t *buffer_in, aci_evt_params_data_received_t *p_evt_params_data_received);
extern void acil_decode_evt_data_ack(uint8_t *buffer_in, aci_evt_params_data_ack_t *p_evt_params_data_ack);
extern uint8_t acil_decode_evt_hw_error(uint8_t *buffer_in, aci_evt_params_hw_error_t *p_aci_evt_params_hw_error);
extern void acil_decode_evt_credit(uint8_t *buffer_in, aci_evt_params_data_credit_t *p_evt_params_data_credit);
extern void acil_decode_evt_connected(uint8_t *buffer_in, aci_evt_params_connected_t *p_aci_evt_params_connected);
extern void acil_decode_evt_timing(uint8_t *buffer_in, aci_evt_params_timing_t *p_evt_params_timing);
extern void acil_decode_evt_pipe_error(uint8_t *buffer_in, aci_evt_params_pipe_error_t *p_evt_params_pipe_error);
extern void acil_decode_evt_key_request(uint8_t *buffer_in, aci_evt_params_key_request_t *p_evt_params_key_request);
extern uint8_t acil_decode_evt_echo(uint8_t *buffer_in, aci_evt_params_echo_t *aci_evt_params_echo);
extern void acil_decode_evt_display_passkey(uint8_t *buffer_in, aci_evt_params_display_passkey_t *p_aci_evt_params_display_passkey);
extern char acil_decode_evt(uint8_t *buffer_in, aci_evt_t *p_aci_evt);